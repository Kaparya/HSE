CODE_SEG  SEGMENT
        ASSUME  CS:CODE_SEG,DS:code_seg
    ORG  100H
START:
  JMP  BEGIN
;----------------------------------------------------------------------------
int_2Fh_vector  DD  ?
old_09h         DD  ?
;----------------------------------------------------------------------------
;============================================================================
new_09h proc far
    pushf               ; В системный обработчик
    call    CS:dword ptr [old_09h]  ; с возвратом
;
    push    AX
    push    BX
    push    ES
;
    mov     AX,40h      ; Настроим ES на сегментный
    mov     ES,AX       ; адрес области данных BIOS
;
    mov     BX,ES:[1Ch] ; Адрес нового хвоста
    dec     BX          ; Сместимся назад к последнему
    dec     BX          ; введенному символу
    cmp     BX,1Eh      ; Хвост не вышел за пределы буфера?
    jae     go          ; Нет, значит он был где-то внутри буфера
;
    mov     BX,3Ch      ; Хвост после вычитания 2 вышел за пределы буфера,
                        ; сл-но он был в самом начале, а последний введенный
                        ; символ находится в самом конце буфера
go:
    mov     AX,ES:[BX]  ; Получим последний символ из буфера
;
    cmp     AX,1600h    ; Был введен расширенный код ASCII сочетания Аlt/U?
    jne     go_out      ; Нет
;
    mov word PTR ES:[BX],00DAh  ; Да, заменим код в буфере на код уголка
go_out:
    pop     ES
    pop     BX
    pop     AX
;
    iret
new_09h endp
;============================================================================
;
;============================================================================
int_2Fh proc far
    cmp AX,0C700h
    jne Pass_2Fh
    mov AL,0FFh
    iret
Pass_2Fh:
    jmp dword PTR CS:[int_2Fh_vector]
int_2Fh endp
;============================================================================
begin:
        mov AX,0C700h   ; AH=0C7h номер процесса C7h
                        ; AL=00h -дать статус установки процесса
        int 2Fh         ; мультиплексное прерывание
        cmp AL,0
        jz  not_installed   ; возвращает AL=0 если не установлена
;
        lea DX,msg
        call    print
        int 20h
msg DB  'Already installed',13,10,'$'
;
not_installed:
;----------------------------------------------------------------------------
    mov AX,352Fh                      ;   получить
                                      ;   вектор
    int 21h                           ;   прерывания  2Fh
    mov word ptr int_2Fh_vector,BX    ;   ES:BX - вектор
    mov word ptr int_2Fh_vector+2,ES  ;
;
    mov DX,offset int_2Fh           ;   получить смещение точки входа в новый
                                    ;   обработчик на DX
    mov AX,252Fh                    ;   функция установки прерывания
                                    ;   изменить вектор 2Fh
    int 21h  ; AL - номер прерыв. DS:DX - указатель программы обработки прер.
;============================================================================
    mov AX,3509h                        ;   получить
                                        ;   вектор
    int 21h                             ;   прерывания  09h
    mov word ptr old_09h,BX    ;   ES:BX - вектор
    mov word ptr old_09h+2,ES  ;
    mov DX,offset new_09h           ;   получить смещение точки входа в новый
;                                   ;   обработчик на DX
    mov AX,2509h                        ;   функция установки прерывания
                                        ;   изменить вектор 09h
    int 21h ;   AL - номер прерыв. DS:DX - указатель программы обработки прер.
;----------------------------------------------------------------------------
    mov DX,offset   begin           ;   оставить программу ...
    int 27h                         ;   ... резидентной и выйти
;============================================================================
;
;============================================================================
PRINT       PROC NEAR
    MOV AH,09H
    INT 21H
    RET
PRINT       ENDP
;;============================================================================
CODE_SEG    ENDS
        END START